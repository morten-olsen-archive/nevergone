{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire(\"reflect-metadata\");\n\nvar apollo_server_express_1 = require(\"apollo-server-express\");\n\nvar express_1 = __importDefault(require(\"express\"));\n\nvar type_graphql_1 = require(\"type-graphql\");\n\nvar typedi_1 = require(\"typedi\");\n\nvar setup_1 = __importDefault(require(\"./data/setup\"));\n\nvar morgan_1 = __importDefault(require(\"morgan\"));\n\nvar cors_1 = __importDefault(require(\"cors\"));\n\nvar files_1 = __importDefault(require(\"./files\"));\n\nvar Resource_1 = __importDefault(require(\"./resolvers/Resource\"));\n\nvar ResourceType_1 = __importDefault(require(\"./resolvers/ResourceType\"));\n\nvar create = function create() {\n  var db, container, schema, app, server;\n  return _regeneratorRuntime.async(function create$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(setup_1.default({\n            connection: './data',\n            client: 'sqlite',\n            useNullAsDefault: true\n          }));\n\n        case 2:\n          db = _context.sent;\n          container = typedi_1.Container;\n          container.set('db', db);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(type_graphql_1.buildSchema({\n            resolvers: [Resource_1.default, ResourceType_1.default],\n            emitSchemaFile: true,\n            container: function container(_ref) {\n              var context = _ref.context;\n              return context.container;\n            }\n          }));\n\n        case 7:\n          schema = _context.sent;\n          app = express_1.default();\n          app.use(morgan_1.default('dev'));\n          app.use(cors_1.default());\n          app.use('/files', files_1.default(db));\n          server = new apollo_server_express_1.ApolloServer({\n            schema: schema,\n            context: function context() {\n              return {\n                container: container\n              };\n            }\n          });\n          server.applyMiddleware({\n            app: app\n          });\n          return _context.abrupt(\"return\", app);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexports.default = create;","map":{"version":3,"sources":["../../src/server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,gBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,WAAA,CAAA;;AAEA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,wBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,4BAAA,CAAA;;AAEA,IAAM,MAAM,GAAG,SAAT,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACI,OAAA,CAAA,OAAA,CAAQ;AACvB,YAAA,UAAU,EAAE,QADW;AAEvB,YAAA,MAAM,EAAE,QAFe;AAGvB,YAAA,gBAAgB,EAAE;AAHK,WAAR,CADJ;;AAAA;AACP,UAAA,EADO;AAMP,UAAA,SANO,GAMK,QAAA,CAAA,SANL;AAOb,UAAA,SAAS,CAAC,GAAV,CAAc,IAAd,EAAoB,EAApB;AAPa;AAAA,2CAQQ,cAAA,CAAA,WAAA,CAAY;AAC/B,YAAA,SAAS,EAAE,CAAC,UAAA,CAAA,OAAD,EAAmB,cAAA,CAAA,OAAnB,CADoB;AAE/B,YAAA,cAAc,EAAE,IAFe;AAG/B,YAAA,SAAS,EAAE,yBAAgB;AAAA,kBAAb,OAAa,QAAb,OAAa;AACzB,qBAAO,OAAO,CAAC,SAAf;AACD;AAL8B,WAAZ,CARR;;AAAA;AAQP,UAAA,MARO;AAgBP,UAAA,GAhBO,GAgBD,SAAA,CAAA,OAAA,EAhBC;AAiBb,UAAA,GAAG,CAAC,GAAJ,CAAQ,QAAA,CAAA,OAAA,CAAO,KAAP,CAAR;AACA,UAAA,GAAG,CAAC,GAAJ,CAAQ,MAAA,CAAA,OAAA,EAAR;AACA,UAAA,GAAG,CAAC,GAAJ,CAAQ,QAAR,EAAkB,OAAA,CAAA,OAAA,CAAc,EAAd,CAAlB;AAEM,UAAA,MArBO,GAqBE,IAAI,uBAAA,CAAA,YAAJ,CAAiB;AAC9B,YAAA,MAAM,EAAN,MAD8B;AAE9B,YAAA,OAAO,EAAE,mBAAK;AACZ,qBAAO;AACL,gBAAA,SAAS,EAAT;AADK,eAAP;AAGD;AAN6B,WAAjB,CArBF;AA8Bb,UAAA,MAAM,CAAC,eAAP,CAAuB;AAAE,YAAA,GAAG,EAAH;AAAF,WAAvB;AA9Ba,2CAgCN,GAhCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;;AAmCA,OAAA,CAAA,OAAA,GAAe,MAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst apollo_server_express_1 = require(\"apollo-server-express\");\nconst express_1 = __importDefault(require(\"express\"));\nconst type_graphql_1 = require(\"type-graphql\");\nconst typedi_1 = require(\"typedi\");\nconst setup_1 = __importDefault(require(\"./data/setup\"));\nconst morgan_1 = __importDefault(require(\"morgan\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst files_1 = __importDefault(require(\"./files\"));\nconst Resource_1 = __importDefault(require(\"./resolvers/Resource\"));\nconst ResourceType_1 = __importDefault(require(\"./resolvers/ResourceType\"));\nconst create = async () => {\n    const db = await setup_1.default({\n        connection: './data',\n        client: 'sqlite',\n        useNullAsDefault: true,\n    });\n    const container = typedi_1.Container;\n    container.set('db', db);\n    const schema = await type_graphql_1.buildSchema({\n        resolvers: [Resource_1.default, ResourceType_1.default],\n        emitSchemaFile: true,\n        container: ({ context }) => {\n            return context.container;\n        },\n    });\n    const app = express_1.default();\n    app.use(morgan_1.default('dev'));\n    app.use(cors_1.default());\n    app.use('/files', files_1.default(db));\n    const server = new apollo_server_express_1.ApolloServer({\n        schema,\n        context: () => {\n            return {\n                container,\n            };\n        },\n    });\n    server.applyMiddleware({ app });\n    return app;\n};\nexports.default = create;\n//# sourceMappingURL=server.js.map"]},"metadata":{},"sourceType":"script"}