{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar express_1 = __importDefault(require(\"express\"));\n\nvar express_fileupload_1 = __importDefault(require(\"express-fileupload\"));\n\nvar nanoid_1 = require(\"nanoid\");\n\nvar create = function create(db) {\n  var app = express_1.default();\n  app.use(express_fileupload_1.default({\n    createParentPath: true\n  }));\n  app.post('/', function _callee(req, res) {\n    var document, id;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (req.files) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('No files send');\n\n          case 2:\n            document = req.files.document;\n\n            if (!Array.isArray(document)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Multifile upload not supported');\n\n          case 5:\n            id = nanoid_1.nanoid();\n            document.mv(\"./documents/\" + id);\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(db('documents').insert({\n              id: id,\n              mimeType: document.mimetype,\n              size: document.size\n            }));\n\n          case 9:\n            res.json({\n              id: id\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n  return app;\n};\n\nexports.default = create;","map":{"version":3,"sources":["../../../src/files/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AAEA,IAAA,oBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAM,MAAM,GAAG,SAAT,MAAS,CAAC,EAAD,EAAsB;AACnC,MAAM,GAAG,GAAG,SAAA,CAAA,OAAA,EAAZ;AACA,EAAA,GAAG,CAAC,GAAJ,CAAQ,oBAAA,CAAA,OAAA,CAAW;AACjB,IAAA,gBAAgB,EAAE;AADD,GAAX,CAAR;AAIA,EAAA,GAAG,CAAC,IAAJ,CAAS,GAAT,EAAc,iBAAO,GAAP,EAAY,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACP,GAAG,CAAC,KADG;AAAA;AAAA;AAAA;;AAAA,kBAEJ,IAAI,KAAJ,CAAU,eAAV,CAFI;;AAAA;AAIN,YAAA,QAJM,GAIK,GAAG,CAAC,KAAJ,CAAU,QAJf;;AAAA,iBAKR,KAAK,CAAC,OAAN,CAAc,QAAd,CALQ;AAAA;AAAA;AAAA;;AAAA,kBAMJ,IAAI,KAAJ,CAAU,gCAAV,CANI;;AAAA;AAQN,YAAA,EARM,GAQD,QAAA,CAAA,MAAA,EARC;AAUZ,YAAA,QAAQ,CAAC,EAAT,kBAA2B,EAA3B;AAVY;AAAA,6CAWN,EAAE,CAAC,WAAD,CAAF,CAAgB,MAAhB,CAAuB;AAC3B,cAAA,EAAE,EAAF,EAD2B;AAE3B,cAAA,QAAQ,EAAE,QAAQ,CAAC,QAFQ;AAG3B,cAAA,IAAI,EAAE,QAAQ,CAAC;AAHY,aAAvB,CAXM;;AAAA;AAiBZ,YAAA,GAAG,CAAC,IAAJ,CAAS;AACP,cAAA,EAAE,EAAF;AADO,aAAT;;AAjBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAsBA,SAAO,GAAP;AACD,CA7BD;;AA+BA,OAAA,CAAA,OAAA,GAAe,MAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express_1 = __importDefault(require(\"express\"));\nconst express_fileupload_1 = __importDefault(require(\"express-fileupload\"));\nconst nanoid_1 = require(\"nanoid\");\nconst create = (db) => {\n    const app = express_1.default();\n    app.use(express_fileupload_1.default({\n        createParentPath: true\n    }));\n    app.post('/', async (req, res) => {\n        if (!req.files) {\n            throw new Error('No files send');\n        }\n        const document = req.files.document;\n        if (Array.isArray(document)) {\n            throw new Error('Multifile upload not supported');\n        }\n        const id = nanoid_1.nanoid();\n        document.mv(`./documents/${id}`);\n        await db('documents').insert({\n            id,\n            mimeType: document.mimetype,\n            size: document.size,\n        });\n        res.json({\n            id,\n        });\n    });\n    return app;\n};\nexports.default = create;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}